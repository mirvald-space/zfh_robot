"""
Bot command handlers.

Handles all Telegram bot commands.
"""

import logging

from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
from src.api.freelancehunt import api_client
from src.api.rate_limiter import rate_limiter
from src.utils.user_manager import user_manager
from src.services.project_service import project_service
from src.utils.db_manager import db_manager

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("debug_sent"))
async def cmd_debug_sent(message: Message):
    """Debug command to check sent projects status."""
    user_id = message.from_user.id
    
    # Check if user is active
    if not user_manager.is_user_active(user_id):
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∞–∫—Ç–∏–≤—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return
    
    # Get sent projects for this user
    user_sent_projects = user_manager.user_sent_projects.get(user_id, set())
    sent_count = len(user_sent_projects)
    
    # Get projects from API for comparison
    projects = await api_client.get_projects()
    if not projects:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∏ –∑ API")
        return
    
    # Count how many current projects are marked as sent to this user
    api_project_ids = [p.get("id") for p in projects]
    sent_api_projects = [pid for pid in api_project_ids if pid in user_sent_projects]
    
    # Calculate total sent projects across all users
    total_sent_projects = sum(len(projects) for projects in user_manager.user_sent_projects.values())
    
    # Generate report
    report = (
        f"üìä <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤</b>\n\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ (–≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º): {total_sent_projects}\n"
        f"–ü—Ä–æ–µ–∫—Ç—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º: {sent_count}\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ API: {len(projects)}\n"
        f"–ó –Ω–∏—Ö –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤–∞–º: {len(sent_api_projects)}\n\n"
    )
    
    # Add information about the first 5 projects
    if projects:
        report += "<b>–û—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏:</b>\n"
        for i, project in enumerate(projects[:5]):
            project_id = project.get("id")
            name = project.get("attributes", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
            is_sent = "‚úÖ" if project_id in user_sent_projects else "‚ùå"
            report += f"{i+1}. {is_sent} ID {project_id}: {name[:30]}...\n"
    
    await message.answer(report)


@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command - activate project notifications."""
    user_id = message.from_user.id
    
    # Get user information
    user_info = {
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "username": message.from_user.username
    }
    
    # Activate user with additional info
    await user_manager.activate_user(user_id, user_info)
    
    await message.answer(
        "‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
        f"–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {user_manager.get_user_interval(user_id)} —Å–µ–∫—É–Ω–¥\n"
        f"–§—ñ–ª—å—Ç—Ä: {user_manager.get_filter_description(user_id)}\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/filter - –æ–±—Ä–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
        "/interval &lt;—Å–µ–∫—É–Ω–¥–∏&gt; - –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n"
        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ API\n"
        "/stop - –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
    )
    
    # Start the monitoring service if not already running
    if project_service and not project_service.is_running:
        import asyncio
        asyncio.create_task(project_service.start_monitoring())


@router.message(Command("stop"))
async def cmd_stop(message: Message):
    """Handle /stop command - deactivate project notifications."""
    user_id = message.from_user.id
    
    if await user_manager.deactivate_user(user_id):
        await message.answer("‚ùå –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await message.answer("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–æ.")


@router.message(Command("interval"))
async def cmd_interval(message: Message, command: CommandObject):
    """Handle /interval command - set check interval."""
    user_id = message.from_user.id
    
    if not command.args:
        current_interval = user_manager.get_user_interval(user_id)
        await message.answer(
            f"–ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {current_interval} —Å–µ–∫—É–Ω–¥\n"
            f"–î–ª—è –∑–º—ñ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /interval &lt;—Å–µ–∫—É–Ω–¥–∏&gt;\n"
            f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {config.MIN_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: {config.MAX_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥"
        )
        return
    
    try:
        interval = int(command.args)
        
        # Validate and set interval
        if interval < config.MIN_CHECK_INTERVAL:
            await message.answer(f"‚ö†Ô∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª - {config.MIN_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥.")
            interval = config.MIN_CHECK_INTERVAL
        elif interval > config.MAX_CHECK_INTERVAL:
            await message.answer(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª - {config.MAX_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥.")
            interval = config.MAX_CHECK_INTERVAL
        
        await user_manager.set_user_interval(user_id, interval)
        await message.answer(f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥.")
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /interval 120")


@router.message(Command("filter"))
async def cmd_filter(message: Message):
    """Handle /filter command - show filter options."""
    builder = InlineKeyboardBuilder()
    
    # –¢–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–µ–∫—Ç–∏ –∑–∞ –º–æ—ó–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏" (only_my_skills)
    # –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ–π —Ñ—ñ–ª—å—Ç—Ä –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
    # builder.button(text="–ü—Ä–æ–µ–∫—Ç–∏ –∑–∞ –º–æ—ó–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏", callback_data="filter:only_my_skills:1")
    builder.button(text="–ó–∞ ID –Ω–∞–≤–∏—á–æ–∫", callback_data="input:skill_id")
    builder.button(text="–ó–∞ ID —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è", callback_data="input:employer_id")
    builder.button(text="–¢—ñ–ª—å–∫–∏ –¥–ª—è Plus", callback_data="filter:only_for_plus:1")
    builder.button(text="–ë–µ–∑ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (—É—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏)", callback_data="filter:clear")
    
    # Adjust to 1 button per row
    builder.adjust(1)
    
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç—ñ–≤:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("filter:"))
async def handle_filter_callback(callback: CallbackQuery):
    """Handle filter selection callbacks."""
    user_id = callback.from_user.id
    parts = callback.data.split(":")
    
    if len(parts) == 1:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ—ñ–ª—å—Ç—Ä–∞")
        return
    
    # Clear all filters
    if parts[1] == "clear":
        await user_manager.clear_user_filters(user_id)
        await callback.message.edit_text("‚úÖ –§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ. –ë—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏.")
    else:
        filter_key = parts[1]
        filter_value = parts[2] if len(parts) > 2 else ""
        
        # Set the filter
        current_filters = user_manager.get_user_filters(user_id)
        current_filters[filter_key] = filter_value
        await user_manager.set_user_filters(user_id, current_filters)
        
        await callback.message.edit_text(
            f"‚úÖ –§—ñ–ª—å—Ç—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {filter_key}={filter_value}\n\n"
            f"–ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: {user_manager.get_filter_description(user_id)}"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("input:"))
async def handle_input_callback(callback: CallbackQuery):
    """Handle callbacks that require user input."""
    filter_key = callback.data.split(":")[1]
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ {filter_key}.\n\n"
        f"–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        f"- –î–ª—è skill_id: 69,99 (—á–µ—Ä–µ–∑ –∫–æ–º—É)\n"
        f"- –î–ª—è employer_id: 123\n\n"
        f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        f"/{filter_key} –∑–Ω–∞—á–µ–Ω–Ω—è"
    )
    await callback.answer()


@router.message(Command("skill_id"))
async def cmd_skill_id(message: Message, command: CommandObject):
    """Handle /skill_id command - set skill_id filter."""
    user_id = message.from_user.id
    
    if not command.args:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID –Ω–∞–≤–∏—á–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /skill_id 69,99")
        return
    
    # Set the filter
    current_filters = user_manager.get_user_filters(user_id)
    current_filters["skill_id"] = command.args
    await user_manager.set_user_filters(user_id, current_filters)
    
    await message.answer(
        f"‚úÖ –§—ñ–ª—å—Ç—Ä –∑–∞ –Ω–∞–≤–∏—á–∫–∞–º–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: skill_id={command.args}\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: {user_manager.get_filter_description(user_id)}"
    )


@router.message(Command("employer_id"))
async def cmd_employer_id(message: Message, command: CommandObject):
    """Handle /employer_id command - set employer_id filter."""
    user_id = message.from_user.id
    
    if not command.args:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /employer_id 123")
        return
    
    # Set the filter
    current_filters = user_manager.get_user_filters(user_id)
    current_filters["employer_id"] = command.args
    await user_manager.set_user_filters(user_id, current_filters)
    
    await message.answer(
        f"‚úÖ –§—ñ–ª—å—Ç—Ä –∑–∞ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü–µ–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: employer_id={command.args}\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: {user_manager.get_filter_description(user_id)}"
    )


# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /myskills —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á
# @router.message(Command("myskills"))
# async def cmd_myskills(message: Message):
#     """Handle /myskills command - show user's skills from profile."""
#     try:
#         user_skills = await api_client.get_user_skills()
#         
#         if user_skills:
#             await message.answer(
#                 f"üîß –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ (ID): {', '.join(map(str, user_skills))}\n\n"
#                 f"–í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {len(user_skills)}\n\n"
#                 f"‚ö†Ô∏è –§–∏–ª—å—Ç—Ä '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –º–æ–∏–º –Ω–∞–≤—ã–∫–∞–º' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω,\n"
#                 f"—Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º.\n"
#                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä '–ü–æ ID –Ω–∞–≤—ã–∫–æ–≤' –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º."
#             )
#         else:
#             await message.answer(
#                 "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤.\n"
#                 "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:\n"
#                 "1. API —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π\n"
#                 "2. –£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ Freelancehunt\n"
#                 "3. –ù–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
#                 "‚ö†Ô∏è –§–∏–ª—å—Ç—Ä '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –º–æ–∏–º –Ω–∞–≤—ã–∫–∞–º' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
#             )
#     except Exception as e:
#         logger.error(f"Error in myskills command: {e}")
#         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤.")


@router.message(Command("status"))
async def cmd_status(message: Message):
    """Handle /status command - show bot and API status."""
    user_id = message.from_user.id
    
    # Get user status
    is_active = user_manager.is_user_active(user_id)
    current_interval = user_manager.get_user_interval(user_id)
    filter_desc = user_manager.get_filter_description(user_id)
    
    # Get user details from database
    user_details = await db_manager.get_user(user_id)
    
    # Format user details
    created_at = user_details.get("created_at", "–Ω–µ–≤—ñ–¥–æ–º–æ") if user_details else "–Ω–µ–º–∞—î –≤ –ë–î"
    if isinstance(created_at, str):
        created_at_str = created_at
    else:
        # Format datetime
        created_at_str = created_at.strftime("%d.%m.%Y %H:%M:%S")
    
    # Get username from DB or current message
    username = user_details.get("username") if user_details else None
    if not username:
        username = message.from_user.username or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    # Get user's name from DB or current message
    if user_details and "first_name" in user_details:
        first_name = user_details.get("first_name", "")
        last_name = user_details.get("last_name", "")
        name = f"{first_name} {last_name}".strip() or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    else:
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        name = f"{first_name} {last_name}".strip() or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    # Get stats
    stats = await user_manager.get_stats()
    new_users_24h = stats.get("new_users_24h", 0)
    
    status_text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {name}\n"
        f"üÜî <b>Username:</b> @{username}\n"
        f"üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ' if is_active else '‚ùå –ó—É–ø–∏–Ω–µ–Ω–æ'}\n"
        f"‚è± –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {current_interval} —Å–µ–∫—É–Ω–¥\n"
        f"üîç –§—ñ–ª—å—Ç—Ä: {filter_desc}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {created_at_str}\n\n"
        f"üì° <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['active_users']}\n"
        f"üë§ –ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ 24–≥: {new_users_24h}\n"
        f"üìù –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['sent_projects']}"
    )
    
    await message.answer(status_text)