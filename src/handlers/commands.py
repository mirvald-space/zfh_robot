"""
Bot command handlers.

Handles all Telegram bot commands.
"""

import logging

from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
from src.api.freelancehunt import api_client
from src.api.rate_limiter import rate_limiter
from src.utils.user_manager import user_manager
from src.services.project_service import project_service
from src.utils.db_manager import db_manager

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("debug_sent"))
async def cmd_debug_sent(message: Message):
    """Debug command to check sent projects status."""
    user_id = message.from_user.id
    
    # Check if user is active
    if not user_manager.is_user_active(user_id):
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∞–∫—Ç–∏–≤—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start", parse_mode='HTML', disable_web_page_preview=True)
        return
    
    # Get sent projects for this user
    user_sent_projects = user_manager.user_sent_projects.get(user_id, set())
    sent_count = len(user_sent_projects)
    
    # Get projects from API for comparison
    projects = await api_client.get_projects()
    if not projects:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∏ –∑ API", parse_mode='HTML', disable_web_page_preview=True)
        return
    
    # Count how many current projects are marked as sent to this user
    api_project_ids = [p.get("id") for p in projects]
    sent_api_projects = [pid for pid in api_project_ids if pid in user_sent_projects]
    
    # Calculate total sent projects across all users
    total_sent_projects = sum(len(projects) for projects in user_manager.user_sent_projects.values())
    
    # Generate report
    report = (
        f"üìä <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤</b>\n\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ (–≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º): {total_sent_projects}\n"
        f"–ü—Ä–æ–µ–∫—Ç—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º: {sent_count}\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ API: {len(projects)}\n"
        f"–ó –Ω–∏—Ö –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤–∞–º: {len(sent_api_projects)}\n\n"
    )
    
    # Add information about the first 5 projects
    if projects:
        report += "<b>–û—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏:</b>\n"
        for i, project in enumerate(projects[:5]):
            project_id = project.get("id")
            name = project.get("attributes", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
            is_sent = "‚úÖ" if project_id in user_sent_projects else "‚ùå"
            report += f"{i+1}. {is_sent} ID {project_id}: {name[:30]}...\n"
    
    await message.answer(report, parse_mode='HTML', disable_web_page_preview=True)


@router.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command - activate project notifications."""
    user_id = message.from_user.id
    
    # Get user information
    user_info = {
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "username": message.from_user.username
    }
    
    # Activate user with additional info
    await user_manager.activate_user(user_id, user_info)
    
    await message.answer(
        "üö® –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏ <b>–ê–ö–¢–ò–í–û–í–ê–ù–û!</b>\n\n"
        f"–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: <b>{user_manager.get_user_interval(user_id)} —Å–µ–∫—É–Ω–¥</b>\n"
        f"–§—ñ–ª—å—Ç—Ä: <b>{user_manager.get_filter_description(user_id)}</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
        "/filter - –æ–±—Ä–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
        "/interval &lt;—Å–µ–∫—É–Ω–¥–∏&gt; - –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n"
        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ API\n"
        "/stop - –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
        "/id_list - –°–ø–∏—Å–æ–∫ ID –ö–∞—Ç–µ–≥–æ—Ä—ñ–π\n",
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    
    # Start the monitoring service if not already running
    if project_service and not project_service.is_running:
        import asyncio
        asyncio.create_task(project_service.start_monitoring())


@router.message(Command("stop"))
async def cmd_stop(message: Message):
    """Handle /stop command - deactivate project notifications."""
    user_id = message.from_user.id
    
    if await user_manager.deactivate_user(user_id):
        await message.answer("‚ùå –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏ <b>–ó–£–ü–ò–ù–ï–ù–û!</b>\n\n"
                            "–í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–æ–≤—É –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é <b>/start</b>", parse_mode='HTML', disable_web_page_preview=True)
    else:
        await message.answer("‚Ñπ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∂–µ <b>–ó–£–ü–ò–ù–ï–ù–û!</b>", parse_mode='HTML', disable_web_page_preview=True)


@router.message(Command("interval"))
async def cmd_interval(message: Message, command: CommandObject):
    """Handle /interval command - set check interval."""
    user_id = message.from_user.id
    
    if not command.args:
        current_interval = user_manager.get_user_interval(user_id)
        await message.answer(
            f"–ü–æ—Ç–æ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: <b>{current_interval} —Å–µ–∫—É–Ω–¥</b>\n"
            f"–î–ª—è –∑–º—ñ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <b>/interval &lt;—Å–µ–∫—É–Ω–¥–∏&gt;</b>\n"
            f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: <b>{config.MIN_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥</b>\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: <b>{config.MAX_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥</b>",
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        return
    
    try:
        interval = int(command.args)
        
        # Validate and set interval
        if interval < config.MIN_CHECK_INTERVAL:
            await message.answer(f"‚ö†Ô∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª - {config.MIN_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥.", parse_mode='HTML', disable_web_page_preview=True)
            interval = config.MIN_CHECK_INTERVAL
        elif interval > config.MAX_CHECK_INTERVAL:
            await message.answer(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª - {config.MAX_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥.", parse_mode='HTML', disable_web_page_preview=True)
            interval = config.MAX_CHECK_INTERVAL
        
        await user_manager.set_user_interval(user_id, interval)
        await message.answer(f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥.", parse_mode='HTML', disable_web_page_preview=True)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /interval 120", parse_mode='HTML', disable_web_page_preview=True)


@router.message(Command("filter"))
async def cmd_filter(message: Message):
    """Handle /filter command - show filter options."""
    builder = InlineKeyboardBuilder()
    
    # –¢–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–µ–∫—Ç–∏ –∑–∞ –º–æ—ó–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏" (only_my_skills)
    # –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ–π —Ñ—ñ–ª—å—Ç—Ä –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
    # builder.button(text="–ü—Ä–æ–µ–∫—Ç–∏ –∑–∞ –º–æ—ó–º–∏ –Ω–∞–≤–∏—á–∫–∞–º–∏", callback_data="filter:only_my_skills:1")
    builder.button(text="–ó–∞ ID –Ω–∞–≤–∏—á–æ–∫", callback_data="input:skill_id")
    builder.button(text="–ó–∞ ID —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è", callback_data="input:employer_id")
    builder.button(text="–¢—ñ–ª—å–∫–∏ –¥–ª—è Plus", callback_data="filter:only_for_plus:1")
    builder.button(text="–ë–µ–∑ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (—É—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏)", callback_data="filter:clear")
    
    # Adjust to 1 button per row
    builder.adjust(1)
    
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç—ñ–≤:",
        reply_markup=builder.as_markup(),
        parse_mode='HTML',
        disable_web_page_preview=True
    )


@router.callback_query(F.data.startswith("filter:"))
async def handle_filter_callback(callback: CallbackQuery):
    """Handle filter selection callbacks."""
    user_id = callback.from_user.id
    parts = callback.data.split(":")
    
    if len(parts) == 1:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ—ñ–ª—å—Ç—Ä–∞")
        return
    
    # Clear all filters
    if parts[1] == "clear":
        await user_manager.clear_user_filters(user_id)
        await callback.message.edit_text("‚úÖ –§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ. –ë—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏.", parse_mode='HTML', disable_web_page_preview=True)
    else:
        filter_key = parts[1]
        filter_value = parts[2] if len(parts) > 2 else ""
        
        # Set the filter
        current_filters = user_manager.get_user_filters(user_id)
        current_filters[filter_key] = filter_value
        await user_manager.set_user_filters(user_id, current_filters)
        
        await callback.message.edit_text(
            f"‚úÖ –§—ñ–ª—å—Ç—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {filter_key}={filter_value}\n\n"
            f"–ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: {user_manager.get_filter_description(user_id)}",
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("input:"))
async def handle_input_callback(callback: CallbackQuery):
    """Handle callbacks that require user input."""
    filter_key = callback.data.split(":")[1]
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ {filter_key}.\n\n"
        f"–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        f"- –î–ª—è skill_id: 69,99 (—á–µ—Ä–µ–∑ –∫–æ–º—É)\n"
        f"- –î–ª—è employer_id: 123\n\n"
        f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        f"/{filter_key} –∑–Ω–∞—á–µ–Ω–Ω—è",
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    await callback.answer()


@router.message(Command("skill_id"))
async def cmd_skill_id(message: Message, command: CommandObject):
    """Handle /skill_id command - set skill_id filter."""
    user_id = message.from_user.id
    
    if not command.args:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID –Ω–∞–≤–∏—á–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /skill_id 69,99", parse_mode='HTML', disable_web_page_preview=True)
        return
    
    # Set the filter
    current_filters = user_manager.get_user_filters(user_id)
    current_filters["skill_id"] = command.args
    await user_manager.set_user_filters(user_id, current_filters)
    
    await message.answer(
        f"‚úÖ –§—ñ–ª—å—Ç—Ä –∑–∞ –Ω–∞–≤–∏—á–∫–∞–º–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: skill_id={command.args}\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: {user_manager.get_filter_description(user_id)}",
        parse_mode='HTML',
        disable_web_page_preview=True
    )


@router.message(Command("employer_id"))
async def cmd_employer_id(message: Message, command: CommandObject):
    """Handle /employer_id command - set employer_id filter."""
    user_id = message.from_user.id
    
    if not command.args:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /employer_id 123", parse_mode='HTML', disable_web_page_preview=True)
        return
    
    # Set the filter
    current_filters = user_manager.get_user_filters(user_id)
    current_filters["employer_id"] = command.args
    await user_manager.set_user_filters(user_id, current_filters)
    
    await message.answer(
        f"‚úÖ –§—ñ–ª—å—Ç—Ä –∑–∞ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü–µ–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: employer_id={command.args}\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏: {user_manager.get_filter_description(user_id)}",
        parse_mode='HTML',
        disable_web_page_preview=True
    )


# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /myskills —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á
# @router.message(Command("myskills"))
# async def cmd_myskills(message: Message):
#     """Handle /myskills command - show user's skills from profile."""
#     try:
#         user_skills = await api_client.get_user_skills()
#         
#         if user_skills:
#             await message.answer(
#                 f"üîß –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ (ID): {', '.join(map(str, user_skills))}\n\n"
#                 f"–í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {len(user_skills)}\n\n"
#                 f"‚ö†Ô∏è –§–∏–ª—å—Ç—Ä '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –º–æ–∏–º –Ω–∞–≤—ã–∫–∞–º' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω,\n"
#                 f"—Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º.\n"
#                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä '–ü–æ ID –Ω–∞–≤—ã–∫–æ–≤' –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º."
#             )
#         else:
#             await message.answer(
#                 "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤.\n"
#                 "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:\n"
#                 "1. API —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π\n"
#                 "2. –£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ Freelancehunt\n"
#                 "3. –ù–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
#                 "‚ö†Ô∏è –§–∏–ª—å—Ç—Ä '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –º–æ–∏–º –Ω–∞–≤—ã–∫–∞–º' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
#             )
#     except Exception as e:
#         logger.error(f"Error in myskills command: {e}")
#         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤.")


@router.message(Command("id_list"))
async def cmd_id_list(message: Message):
    """Show list of all category IDs."""
    user_id = message.from_user.id
    
    # Check if user is active
    if not user_manager.is_user_active(user_id):
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∞–∫—Ç–∏–≤—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start", parse_mode='HTML', disable_web_page_preview=True)
        return
    
    # Category IDs list
    categories = [
        "1 - PHP",
        "2 - C & C++",
        "6 - Linux & Unix",
        "7 - Windows",
        "13 - Java",
        "14 - Search Engine Optimization (SEO)",
        "17 - Logo Design",
        "18 - Photo Processing",
        "22 - Python",
        "24 - C#",
        "28 - Javascript and Typescript",
        "37 - Text Translation",
        "38 - Articles & Blog Posts",
        "39 - System & Network Administration",
        "41 - Banners",
        "42 - Interface Design (UI/UX)",
        "43 - Web Design",
        "45 - Website Maintenance",
        "57 - Testing & QA",
        "58 - Vector Graphics",
        "59 - 3D Modeling",
        "64 - Object Design",
        "65 - Cybersecurity & Data Protection",
        "68 - Online Stores & E-commerce",
        "75 - Print Design",
        "76 - Copywriting",
        "77 - Corporate Style",
        "78 - Content Management Systems",
        "79 - English",
        "80 - German",
        "83 - Software & Server Configuration",
        "84 - Spanish",
        "86 - Databases & SQL",
        "88 - Gaming Apps",
        "89 - Project Management",
        "90 - Illustrations & Drawings",
        "91 - Animation",
        "93 - Icons & Pixel Graphics",
        "94 - Marketing Research",
        "95 - Tuition",
        "96 - Website Development",
        "97 - Technical Documentation",
        "99 - Web Programming",
        "100 - Music",
        "101 - Video Processing",
        "102 - Audio Processing",
        "103 - Desktop Apps",
        "104 - Content Management",
        "106 - Interior Design",
        "107 - Landscape Projects & Design",
        "108 - Architectural Design",
        "109 - Outdoor Advertising",
        "113 - Audio & Video Editing",
        "114 - Presentations",
        "117 - Packaging and label design",
        "120 - Apps for iOS (iPhone and iPad)",
        "121 - App Development for Android",
        "122 - Transcribing",
        "123 - Naming & Slogans",
        "124 - HTML & CSS",
        "125 - Rewriting",
        "127 - Contextual Advertising",
        "129 - Payment Systems Integration",
        "131 - Social Media Marketing (SMM)",
        "132 - Exhibition Booth Design",
        "133 - Social Media Advertising",
        "134 - Website SEO Audit",
        "135 - Search Engine Reputation Management (SERM)",
        "136 - Email Marketing",
        "138 - Advertising",
        "139 - Photography",
        "140 - Poems, Songs & Prose",
        "141 - Artwork",
        "143 - Speaker & Voice Services",
        "144 - Video Advertising",
        "145 - Teaser Advertisements",
        "147 - Drawings & Diagrams",
        "148 - Engineering",
        "149 - Accounting Services",
        "150 - Client Management & CRM",
        "151 - Social Media Page Design",
        "152 - Type & Font Design",
        "153 - Legal Services",
        "154 - Consulting",
        "156 - Business Card Design",
        "157 - Software, Website & Game Localization",
        "158 - French",
        "159 - Recruitment (HR)",
        "161 - Video Recording",
        "162 - Lead Generation & Sales",
        "163 - Script Writing",
        "164 - Industrial Design",
        "168 - Text Editing & Proofreading",
        "169 - Data Parsing",
        "170 - Information Gathering",
        "171 - Customer Support",
        "172 - Infographics",
        "175 - AI & Machine Learning",
        "176 - Embedded Systems & Microcontrollers",
        "178 - Data Processing",
        "179 - Mobile Apps Design",
        "180 - Bot Development",
        "181 - DevOps",
        "182 - Cryptocurrency & Blockchain",
        "183 - Hybrid Mobile Apps",
        "184 - Link Building",
        "185 - AR & VR Development",
        "186 - AI Art",
        "187 - VR & AR Design",
        "188 - Mechanical Engineering & Instrument Making",
        "189 - Enterprise Resource Planning (ERP)",
        "190 - AI Consulting",
        "191 - AI Speech & Audio Generation",
        "192 - Video Creation by Artificial Intelligence",
        "193 - App Store Optimization (ASO)",
        "194 - Public Relations (PR)",
        "195 - Polish",
        "196 - Ukrainian",
        "197 - AI Content Creation",
        "198 - Clothing design"
    ]
    
    # Split categories into chunks to avoid message length limit
    chunk_size = 30
    chunks = [categories[i:i + chunk_size] for i in range(0, len(categories), chunk_size)]
    
    # Send header message
    await message.answer(
        "üìã <b>–°–ø–∏—Å–æ–∫ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ–π FreelanceHunt:</b>\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—ñ ID –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /skill_id\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>/skill_id 22</code> –¥–ª—è Python",
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    
    # Send categories in chunks
    for i, chunk in enumerate(chunks, 1):
        chunk_text = "\n".join(chunk)
        header = f"üìÑ <b>–ß–∞—Å—Ç–∏–Ω–∞ {i}/{len(chunks)}:</b>\n\n"
        
        await message.answer(
            f"{header}<code>{chunk_text}</code>",
            parse_mode='HTML',
            disable_web_page_preview=True
        )


@router.message(Command("status"))
async def cmd_status(message: Message):
    """Handle /status command - show bot and API status."""
    user_id = message.from_user.id
    
    # Get user status
    is_active = user_manager.is_user_active(user_id)
    current_interval = user_manager.get_user_interval(user_id)
    filter_desc = user_manager.get_filter_description(user_id)
    
    # Get user details from database
    user_details = await db_manager.get_user(user_id)
    
    # Format user details
    created_at = user_details.get("created_at", "–Ω–µ–≤—ñ–¥–æ–º–æ") if user_details else "–Ω–µ–º–∞—î –≤ –ë–î"
    if isinstance(created_at, str):
        created_at_str = created_at
    else:
        # Format datetime
        created_at_str = created_at.strftime("%d.%m.%Y %H:%M:%S")
    
    # Get username from DB or current message
    username = user_details.get("username") if user_details else None
    if not username:
        username = message.from_user.username or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    # Get user's name from DB or current message
    if user_details and "first_name" in user_details:
        first_name = user_details.get("first_name", "")
        last_name = user_details.get("last_name", "")
        name = f"{first_name} {last_name}".strip() or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    else:
        first_name = message.from_user.first_name or ""
        last_name = message.from_user.last_name or ""
        name = f"{first_name} {last_name}".strip() or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    # Get stats
    stats = await user_manager.get_stats()
    new_users_24h = stats.get("new_users_24h", 0)
    
    status_text = (
        f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: <b>{name}</b>\n"
        f"Username: <b>@{username}</b>\n"
        f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: <b>{'‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ' if is_active else '‚ùå –ó—É–ø–∏–Ω–µ–Ω–æ'}</b>\n"
        f"–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: <b>{current_interval} —Å–µ–∫—É–Ω–¥</b>\n"
        f"–§—ñ–ª—å—Ç—Ä: <b>{filter_desc}</b>\n"
        f"–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: <b>{created_at_str}</b>\n\n"
        f"üì° <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{stats['active_users']}</b>\n"
        f"–ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ 24–≥: <b>{new_users_24h}</b>\n"
        f"–í—Å—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: <b>{stats['sent_projects']}</b>"
    )
    
    await message.answer(status_text, parse_mode='HTML', disable_web_page_preview=True)